package ${entity.javaPackage};
/**
*   auto-generated by FreeMarker
*   author:handong
*/
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.internal.util.reflection.Whitebox;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static org.mockito.Mockito.mock;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

<#list entity.managerImportList as property>
import ${property};
</#list>


public class ${entity.className}<#if entity.superclass?has_content> extends ${entity.superclass}</#if>{
    private ${entity.controllerName?cap_first} ${entity.controllerName};
    <#list entity.managerNameList as property>
    private ${property?cap_first} ${property};
    </#list>
    private MockMvc mockMvc;
    @Before
    public void setUp() throws Exception {

        ${entity.controllerName} = new ${entity.controllerName?cap_first}();
        mockMvc = MockMvcBuilders.standaloneSetup(${entity.controllerName}).build();

    <#list entity.managerNameList as property>
        ${property} = mock(${property?cap_first}.class);
        Whitebox.setInternalState(${entity.controllerName},"${property}",${property});

    </#list>

    }

    <#list entity.methodList as method>
        @Test
        public void test${method.name?cap_first}() throws Exception{
            mockMvc.perform(post("/${entity.controllerAlias}/${method.alias}.do")
            <#list method.paramList as param>
            .param("${param}", "")
            </#list>
            ).andExpect(status().isOk());
        }
    </#list>

}
